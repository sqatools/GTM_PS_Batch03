{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope='session', autouse=True)\n    def configure_logging():\n>       logging.config.fileConfig('logging.conf')\n\n..\\..\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfname = 'logging.conf', defaults = None, disable_existing_loggers = True, encoding = None\n\n    def fileConfig(fname, defaults=None, disable_existing_loggers=True, encoding=None):\n        \"\"\"\n        Read the logging configuration from a ConfigParser-format file.\n    \n        This can be called several times from an application, allowing an end user\n        the ability to select from various pre-canned configurations (if the\n        developer provides a mechanism to present the choices and load the chosen\n        configuration).\n        \"\"\"\n        import configparser\n    \n        if isinstance(fname, str):\n            if not os.path.exists(fname):\n>               raise FileNotFoundError(f\"{fname} doesn't exist\")\nE               FileNotFoundError: logging.conf doesn't exist\n\nC:\\Python311\\Lib\\logging\\config.py:65: FileNotFoundError\n", "test_name": "test_dummy_booking_website", "rerun": "0"}}, "suite_name": "tests/ui/dummy_booking/test_dummy_booking_feature.py"}}}, "date": "June 06, 2024", "start_time": 1717652625.8372102, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}